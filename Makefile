$(info $$PREFIX is [${PREFIX}])
# Report the PATH prefix

TARGET=mpest
$(info $$TARGET is [${TARGET}])
# Report the target

# Choose: mac, windows, or unix
ARCHITECTURE ?= unix
$(info $$ARCHITECTURE is [${ARCHITECTURE}])
# Report the architecture used

MPI ?= no
# Set MPI=yes for the parallel version

DEBUG ?= no
# Set DEBUG=yes for a debug version

OPTFLAGS ?= -O3

CC = gcc
# set compiler for the non-MPI version (mpicc will be used for the MPI
# version regardless of this setting)

# End of user configuration
############

ifeq ($(strip $(ARCHITECTURE)), mac) 
	CFLAGS += -DMAC_VERSION
else 
ifeq ($(strip $(ARCHITECTURE)), windows)
	CFLAGS += -DWIN_VERSION
else 
ifeq ($(strip $(ARCHITECTURE)), unix)
	CFLAGS += -DUNIX_VERSION
else
	ARCHITECTURE = none
endif
endif
endif
# Set the CFLAGS baesd on the architecture

ifeq ($(ARCHITECTURE), none)
missing:
	@echo
	@echo Please set compilation target in this Makefile.
	@echo set ARCHITECTURE to one of \"mac\", \"windows\" or \"unix\"
	@echo set MPI to yes if you want to use the parallel version
	@echo set DEBUG to generate a debug version of MrBayes
	@echo
endif 
# An error message for missing or invalid architecture options

############

ifeq  ($(strip $(MPI)),yes)
	CFLAGS += -DMPI_ENABLED
	CC = mpicc
endif
# Set options if the parallel version is to be built

############

ifeq ($(strip $(DEBUG)), yes)
	CFLAGS += -ggdb
else
	CFLAGS += $(OPTFLAGS)
endif
# Set the CFLAGS if DEBUG is set

############

CFLAGS   +=   -Wall -Wno-uninitialized
LIBS      =   -lm
LDFLAGS   =   $(CFLAGS)
OBJECTS   =   src/mpest.o src/tool.o
# Compile options

$(info $$CC is [${CC}])
# Report the compiler used

mpest: $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(TARGET) $(LIBS)
# Compile the program

############

showdep: 
	@$(CC) -MM src/mpest.c src/tool.c
# dependencies are generated by make showdep

tool.o: src/tool.c src/mpest.h 
mpest.o: src/mpest.c src/mpest.h src/tool.o

# Not sure if this section is needed... tool.o and mpest.o seem to be generated just with "make" or "make install"
############

test: $(TARGET)
# Just results in "make: Nothing to be done for `test'."

############

install: $(TARGET)
	cp $(TARGET) $(PREFIX)/bin/$(TARGET)
# Command to install by moving binary

uninstall:
	rm -f $(PREFIX)/bin/$(TARGET)
# Command to uninstall by removing binary

clean:
	rm -f src/*.o $(TARGET)
# Command to remove all compiled files to make a clean install

############